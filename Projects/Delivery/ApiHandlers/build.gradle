/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "nebula.lint" version "16.9.0"
    id 'checkstyle'
}

checkstyle {
    // We use default checkstyle from Github checkstyle project. 
    // https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml 
    // Gradle has to use the same version of checkstyle or some rules might not be available yet
    // Make sure that you use the same tool version if you update the checkstyle.xml at 
    // See https://github.com/checkstyle/checkstyle/releases
    toolVersion = '8.42'
    configFile = file('config/checkstyle/checkstyle.xml')
    // Allow some warnings before putting checkstyle in place. These warning will be gradually removed.
    maxWarnings = 120
}

//gradleLint {
//    rules=['unused-dependency']
//}

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    testImplementation 'org.mockito:mockito-inline:3.7.7'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.7.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:2.2.9'
    runtimeOnly 'mysql:mysql-connector-java:8.0.15'
    implementation 'org.json:json:20210307'

    implementation 'software.amazon.awssdk:rds:2.16.38'
    implementation('software.amazon.awssdk:secretsmanager:2.15.0') {
        exclude module: 'netty-nio-client'
        exclude module: 'apache-client'
        exclude group: ['com.fasterxml.jackson.databind.deser', 'com.fasterxml.jackson.databind.ser', 'com.fasterxml.jackson.databind.introspect'], module: 'jackson-databind'
    }
    implementation 'software.amazon.awssdk:url-connection-client:2.16.44'

    // compileOnly means that this will not have an impact on cold start times, as it's not part of the final artifact
    compileOnly "org.projectlombok:lombok:1.18.20"
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
}

test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
    // Use this flag to show output from running the test
    // testLogging.showStandardStreams = true
}

sourceSets {
    main.java.srcDirs = ['src']
    main.resources.srcDirs = ['scripts','resources']
    test.java.srcDirs = ['tst']

}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

build.dependsOn buildZip
sourceCompatibility = '11'